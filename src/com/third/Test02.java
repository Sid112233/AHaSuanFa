package com.third;

public class Test02 {
	//此算法仅适用空投炸弹
	public static void main(String[] args) {
		//载入游戏地图，#代表墙，G代表敌人，.代表空地
		int m = 13,n = 13;//n:13行,m:13列
		char a[][] = {
				{'#','#','#','#','#','#','#','#','#','#','#','#','#'},
				{'#','G','G','.','G','G','G','#','G','G','G','.','#'},
				{'#','#','#','.','#','G','#','G','#','G','#','G','#'},
				{'#','.','.','.','.','.','.','.','#','.','.','G','#'},
				{'#','G','#','.','#','#','#','.','#','G','#','G','#'},
				
				{'#','G','G','.','G','G','G','.','#','.','G','G','#'},
				{'#','G','#','.','#','G','#','.','#','.','#','#','#'},
				{'#','#','G','.','.','.','G','.','.','.','.','.','#'},
				{'#','G','#','.','#','G','#','#','#','.','#','G','#'},
				{'#','.','.','.','G','#','G','G','G','.','G','G','#'},
				
				{'#','G','#','.','#','G','#','G','#','.','#','G','#'},
				{'#','G','G','.','G','G','G','#','#','.','G','G','#'},
				{'#','#','#','#','#','#','#','#','#','#','#','#','#'}
		};
		int i,j,sum,map=0,p = 0,q = 0;
		int x;//第几行
		int y;//第几列
		//双重for()枚举每个点
		for (i = 0;  i< n; i++) {
			for (j = 0; j < m; j++) {
				//判断是不是空地，是的话才能放置炸弹
				if (a[i][j] == '.') {
					sum = 0;//用力计能消灭的敌人数
					x = i; y = j;
					while (a[x][y] != '#') {
						if (a[x][y] == 'G') {
							sum++;
						}
						x++;
					}
					x = i; y = j;
					while (a[x][y] != '#') {
						if (a[x][y] == 'G') {
							sum++;
						}
						x--;
					}
					x = i; y = j;
					while (a[x][y] != '#') {
						if (a[x][y] == 'G') {
							sum++;
						}
						y++;
					}
					x = i; y = j;
					while (a[x][y] != '#') {
						if (a[x][y] == 'G') {
							sum++;
						}
						y--;
					}
					if(sum > map){//用map记录sum的最大值
						map = sum;
						p = i;
						q = j;//p,q记录当前点的坐标					
					}
				}
			}
		}
		System.out.println("把炸弹放置在:a["+p+","+q+"]处，可以消灭的敌人最多，为:"+map+"个");
	}
}
